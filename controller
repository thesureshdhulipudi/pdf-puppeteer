package com.http2.demo;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
//@CrossOrigin(origins = "http://localhost:3000")https://localhost:8088/getAllEmp
@CrossOrigin(origins = "https://localhost")
public class Controller {

    @GetMapping("/getAllEmp")
    public ResponseEntity<Object> getData(){
    	
    	 List<EmployeeDTO> employees = new ArrayList<>();

         employees.add(new EmployeeDTO(1L, "John", "Doe", "john.doe@example.com", "Developer", 75000));
         employees.add(new EmployeeDTO(2L, "Jane", "Smith", "jane.smith@example.com", "Manager", 85000));
         employees.add(new EmployeeDTO(3L, "Emily", "Johnson", "emily.johnson@example.com", "Analyst", 65000));
         employees.add(new EmployeeDTO(4L, "Michael", "Brown", "michael.brown@example.com", "Designer", 70000));
         employees.add(new EmployeeDTO(5L, "Sarah", "Davis", "sarah.davis@example.com", "Tester", 60000));

    	
        return ResponseEntity.status(HttpStatus.OK).body(employees);
    }
    
    @GetMapping("/generate")
    public String generatePdf() {
        try {
            // Path to the Node.js script
            String scriptPath = "src/main/resources/scripts/capture.js";

            // Command to run the Node.js script with the URL as a parameter
            ProcessBuilder processBuilder = new ProcessBuilder("node", scriptPath, "http://localhost:3000");
            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();

            // Capture the output (PDF data)
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            InputStream inputStream = process.getInputStream();
            byte[] buffer = new byte[1024];
            int length;
            while ((length = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, length);
            }

            // Wait for the process to finish
            int exitCode = process.waitFor();
            if (exitCode != 0) {
                String errorMessage = new String(outputStream.toByteArray(), "UTF-8");
                throw new RuntimeException("Error generating PDF: " + errorMessage);
            }

            // Save the PDF to a file
            Path pdfPath = Paths.get("generated.pdf");
            Files.write(pdfPath, outputStream.toByteArray());

            return "PDF generated successfully: " + pdfPath.toAbsolutePath().toString();

        } catch (Exception e) {
            e.printStackTrace();
            return "Error generating PDF: " + e.getMessage();
        }
    }
    
}
